// Code generated by go-bindata.
// sources:
// files/cf-mgmt.sh
// files/cf-mgmt.yml
// files/pipeline.yml
// files/security-group.json
// files/vars.yml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesCfMgmtSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\x2a\x4e\x2d\x51\xd0\x4d\xe5\x4a\x4e\x51\x48\xce\xcf\x4b\xcb\x4c\xd7\x2d\x4a\x2d\xc8\xe7\x4a\x4e\xd3\xcd\x4d\xcf\x2d\x51\x50\x71\x76\x8b\xf7\x75\xf7\x0d\x89\x77\xf6\xf7\xf5\x75\xf4\x73\xe1\x02\x04\x00\x00\xff\xff\x4b\xdb\x02\xbb\x43\x00\x00\x00")

func filesCfMgmtShBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtSh,
		"files/cf-mgmt.sh",
	)
}

func filesCfMgmtSh() (*asset, error) {
	bytes, err := filesCfMgmtShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.sh", size: 67, mode: os.FileMode(420), modTime: time.Unix(1466700458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesCfMgmtYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xcd\x4d\x8a\xc3\x30\x0c\xc5\xf1\xbd\x4f\x21\xb2\x1e\x4d\xf6\xbe\xcc\x60\x34\xb2\x63\x12\x7f\x20\xc9\xc3\x84\xd2\xbb\xd7\x29\xa5\xd0\xed\xfb\xc3\xef\x21\xa2\xeb\x47\xb0\xd8\xa4\x78\x38\x72\x1d\xff\xce\xe5\x12\x12\xff\x08\x6b\x1b\x42\xec\x1d\x80\x9d\x9d\x3d\xfc\x36\xda\x59\xf0\x99\xe7\xf8\xca\x70\x13\xee\x4d\xb3\x35\x39\x3d\x74\x8a\xca\xf2\x97\x89\x75\xa5\x88\x25\x15\xfb\x02\x0b\xc9\xc3\x32\x6f\x58\x6d\xb9\xcf\x83\xda\x87\xe9\x05\x23\xd4\x50\xa6\x41\xad\xc6\x9c\xf0\x92\x9c\x93\x51\xaf\xd6\x83\x6d\x1f\x65\xa5\xbc\x5a\xd0\xfd\x2d\x7f\xeb\xe6\x1e\x01\x00\x00\xff\xff\xa8\x2e\xef\x81\xc2\x00\x00\x00")

func filesCfMgmtYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtYml,
		"files/cf-mgmt.yml",
	)
}

func filesCfMgmtYml() (*asset, error) {
	bytes, err := filesCfMgmtYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.yml", size: 194, mode: os.FileMode(420), modTime: time.Unix(1467352000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesPipelineYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x96\xcd\x8e\x9b\x30\x10\xc7\xef\x79\x8a\x79\x01\x36\xea\xa1\x17\x6e\x51\xc2\xae\x90\x4a\x52\x85\x54\x55\x55\x55\x96\x97\x38\xd4\x5d\x8c\xe9\xd8\x6c\x85\xa2\xbc\x7b\xc7\x40\x02\xa1\x68\x77\xbb\xfd\xb8\x70\x23\xcc\xc7\x7f\xe6\xf7\x4f\xec\xa0\x30\xba\xc4\x44\x18\x7f\xe6\x41\xce\x95\xf0\x21\xd1\xf9\x41\xa6\x1e\x8a\x42\xcf\x00\x6c\x55\xd0\xbb\x54\x5a\x7a\x6e\x52\x7d\x7a\x02\x28\x51\xfa\x70\x3c\x52\x80\xb9\x4c\x46\x9f\x4f\xa7\x3a\x72\x8f\x3c\x4f\xbe\xfa\xa0\xb8\xb1\x02\xeb\x57\x05\xca\x47\x6e\x05\x7b\x10\xd5\xb9\xa8\xf7\x8a\xea\xce\xda\x6f\xde\xaa\x8b\xa6\x95\x4a\x74\xa2\x70\x94\x39\xb5\x7b\xe4\x59\x9d\x75\x9a\xcd\xbe\xe9\xfb\xfe\xd4\x28\xa8\x9d\xa7\x31\x35\x54\x54\x64\x3c\x77\x73\x7a\x90\x0a\x3b\x5c\x89\x04\x50\xa6\xa9\x40\xd2\xc0\x52\xd4\x69\x96\x9b\x87\x61\x13\x80\x83\xcc\xae\x81\xcc\x13\x39\x77\xa9\x66\x9e\x1c\x3c\x95\x2a\x7b\x53\xa9\xac\x59\x91\x23\x57\xa6\x61\x03\x10\x7f\x8a\x77\x41\xc4\x56\x9b\x68\x11\xae\xdd\xca\xa6\x22\x18\x8a\xed\xb5\xe2\x32\x6f\x41\x01\x7c\x88\x83\x2d\x0b\x57\x2e\xa1\x34\x02\x99\xdc\x5f\x42\xef\x17\x71\xfc\x71\xb3\xad\x63\x05\x37\xe6\x87\xc6\x2e\xb8\xdc\xac\x6f\xc3\x3b\xb6\x0a\xb7\x3e\xdc\xcc\x9b\xf9\xce\xa1\x77\x61\xb0\xde\xb1\x38\x58\x6e\x83\x9d\x2b\x4e\x32\x29\x72\xcb\x8c\xa0\xe5\x6c\xd7\xe1\x96\x45\x77\xd1\x8e\x2d\x37\x51\xb4\x58\xaf\xae\x57\x1f\x30\x35\x05\xa7\x2f\xc8\xf3\x54\xdd\x98\x62\xef\xc3\xe7\x5e\xaf\x2f\x2f\xe1\x7d\x11\x98\x22\xf1\x76\xf9\x33\xf3\xb2\xd8\xff\x09\xf3\xa6\xee\x69\xea\x43\x89\x49\x51\xbf\x5e\x7e\x8c\xba\xe7\x46\xfc\xeb\xe8\xeb\x16\xcd\xf1\xf6\x32\x67\x2e\x63\x4c\xd6\x9e\x96\xc0\xa8\x47\xdf\x4b\x4d\x00\xfe\xfd\xef\xa3\x13\x9a\xae\x0d\x2d\x82\x51\x1f\xa8\x11\xdd\xfc\xb6\xf2\x52\xd4\x65\xf1\x3f\x0c\xf9\x55\x71\xba\xce\x0c\x59\x0c\x2c\xa2\x0b\xf8\xb5\x87\xd9\x53\x77\xf7\xef\x1c\x65\xfd\x11\xa6\xe8\x53\xb7\xff\x88\x37\xaf\x3d\xc4\x9e\xff\x63\x35\x26\x32\x55\xfc\x2d\x80\x9f\x01\x00\x00\xff\xff\x5c\x31\x54\xcd\xea\x0c\x00\x00")

func filesPipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesPipelineYml,
		"files/pipeline.yml",
	)
}

func filesPipelineYml() (*asset, error) {
	bytes, err := filesPipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/pipeline.yml", size: 3306, mode: os.FileMode(420), modTime: time.Unix(1467071426, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesSecurityGroupJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8a\x8e\xe5\x02\x04\x00\x00\xff\xff\x44\xd2\x68\x70\x03\x00\x00\x00")

func filesSecurityGroupJsonBytes() ([]byte, error) {
	return bindataRead(
		_filesSecurityGroupJson,
		"files/security-group.json",
	)
}

func filesSecurityGroupJson() (*asset, error) {
	bytes, err := filesSecurityGroupJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/security-group.json", size: 3, mode: os.FileMode(420), modTime: time.Unix(1467070519, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesVarsYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x8e\x41\x6a\xc5\x30\x0c\x44\xf7\x3e\xc5\xdc\xa0\xfb\x52\x7c\x15\x63\x14\x25\x15\x34\x96\x91\x64\x42\x6e\x5f\x07\x93\x0b\xfc\xdd\x9b\xe7\xf1\xa0\x43\xa2\x18\x77\x2d\xc3\xe4\x1b\x3f\xb7\x0e\xc3\x74\x78\x1c\xa6\xcb\xc9\x6f\x0f\x3e\xcb\xa6\x67\x95\xf6\x56\x68\xc7\xf2\x58\x3e\xa7\xe1\x6c\x45\xb6\x59\x78\x08\x95\x48\x47\x0b\x5c\x12\xbf\xe8\x6c\xa7\xb8\x8b\x36\x84\x82\x8c\x6b\x30\xd4\x0e\xff\xf2\x5e\x89\x3d\xa7\x5e\xdd\x2f\xb5\xe7\xfb\x8b\xd0\x1d\x9f\x4c\xd1\x9f\x70\x8b\xe2\x3c\x1f\x63\xee\xad\x8c\x95\xb1\xab\x61\xd4\x4a\x0b\xd6\xcd\x39\xfd\x07\x00\x00\xff\xff\x96\x41\x51\x7f\x06\x01\x00\x00")

func filesVarsYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesVarsYml,
		"files/vars.yml",
	)
}

func filesVarsYml() (*asset, error) {
	bytes, err := filesVarsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/vars.yml", size: 262, mode: os.FileMode(420), modTime: time.Unix(1466703024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/cf-mgmt.sh": filesCfMgmtSh,
	"files/cf-mgmt.yml": filesCfMgmtYml,
	"files/pipeline.yml": filesPipelineYml,
	"files/security-group.json": filesSecurityGroupJson,
	"files/vars.yml": filesVarsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"cf-mgmt.sh": &bintree{filesCfMgmtSh, map[string]*bintree{}},
		"cf-mgmt.yml": &bintree{filesCfMgmtYml, map[string]*bintree{}},
		"pipeline.yml": &bintree{filesPipelineYml, map[string]*bintree{}},
		"security-group.json": &bintree{filesSecurityGroupJson, map[string]*bintree{}},
		"vars.yml": &bintree{filesVarsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

