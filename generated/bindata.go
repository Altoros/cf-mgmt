// Code generated by go-bindata.
// sources:
// pipeline/cf-mgmt.sh
// pipeline/cf-mgmt.yml
// pipeline/pipeline.yml
// pipeline/vars.yml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pipelineCfMgmtSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\x2a\x4e\x2d\x51\xd0\x4d\xe5\x4a\x4e\x51\x48\xce\xcf\x4b\xcb\x4c\xd7\x2d\x4a\x2d\xc8\xe7\x4a\x4e\xd3\xcd\x4d\xcf\x2d\x51\x50\x71\x76\x8b\xf7\x75\xf7\x0d\x89\x77\xf6\xf7\xf5\x75\xf4\x73\xe1\x02\x04\x00\x00\xff\xff\x4b\xdb\x02\xbb\x43\x00\x00\x00")

func pipelineCfMgmtShBytes() ([]byte, error) {
	return bindataRead(
		_pipelineCfMgmtSh,
		"pipeline/cf-mgmt.sh",
	)
}

func pipelineCfMgmtSh() (*asset, error) {
	bytes, err := pipelineCfMgmtShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pipeline/cf-mgmt.sh", size: 67, mode: os.FileMode(420), modTime: time.Unix(1466700458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pipelineCfMgmtYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xcc\x41\x0e\x03\x21\x08\x85\xe1\x3d\xa7\xf0\x02\x94\xbd\xb7\x31\x54\x1d\x33\x23\x12\xc0\xa6\xc7\xef\x74\xd3\xa4\xeb\xef\xbd\x1f\x11\x41\xaf\x12\x6d\xd9\xcc\xe9\x1a\xb2\xdf\x00\x63\x96\x5e\x73\x7a\x2e\x3e\xab\x65\x22\x52\x6e\x5e\xed\x35\xb8\x3a\x71\xc3\xd9\x67\xdc\x2b\xd1\x1d\x9e\x21\x25\x4c\x52\xe6\x7d\xe0\x25\x6d\x74\xb4\xaa\x0b\xc0\xb6\x7c\x4d\x4b\x1c\x7f\x42\x3c\x28\x8a\x9f\xbf\xd2\xc3\x0f\xf8\x04\x00\x00\xff\xff\x61\xad\x8f\x57\x87\x00\x00\x00")

func pipelineCfMgmtYmlBytes() ([]byte, error) {
	return bindataRead(
		_pipelineCfMgmtYml,
		"pipeline/cf-mgmt.yml",
	)
}

func pipelineCfMgmtYml() (*asset, error) {
	bytes, err := pipelineCfMgmtYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pipeline/cf-mgmt.yml", size: 135, mode: os.FileMode(420), modTime: time.Unix(1466702629, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pipelinePipelineYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x94\xdd\x6a\xb3\x30\x1c\xc6\xcf\x7b\x15\xff\x1b\xb0\x9e\xe7\xac\x54\x5b\x84\x57\x7d\x51\xc7\x18\x63\x84\x54\x53\x97\xd5\xa8\x24\x71\x43\x4a\xef\x7d\x89\xf6\x4b\x29\x5b\xcb\x0e\x3d\x8b\x79\xfe\x1f\xcf\xf3\x0b\x28\xa8\xac\x1a\x91\x52\x89\x66\x16\x94\x84\x53\x04\x69\x55\x6e\x59\x6e\x09\x5a\x57\x33\x00\xd5\xd6\xfa\x2e\x67\x4a\x9f\xfb\x52\xa4\x4f\x00\x8d\x60\x08\xf6\x7b\x2d\x60\x53\x89\xf5\xf7\xe1\xd0\x29\x1b\x41\xca\xf4\x1d\x01\x27\x52\x51\xd1\x5d\xd5\x82\x7d\x12\x45\xf1\x8e\xb6\xa7\xa6\xab\x2b\xdd\xf7\x51\x6d\xae\x1d\x08\xaa\x25\xab\x12\xb9\xd4\xed\x75\x41\x4a\xb3\xd3\x82\x9c\xaa\xb1\x3d\x6d\x50\xb0\x3c\xa7\x02\xe9\x43\x43\xbb\x32\x45\xe4\x6e\x3c\x04\x60\xcb\x8a\x61\x38\x3b\x65\xb6\x29\x95\x76\xba\xb5\x78\xce\xd5\xbc\xe5\x45\x6f\x97\x08\xc2\x65\x9f\x13\x20\x7e\x89\x13\xd7\xc7\x4e\xe8\x2f\xbc\xc0\xd8\x97\xad\x0e\xc6\x71\x56\x71\xc2\xca\x63\x68\x80\xa7\xd8\x8d\xb0\xe7\x98\x82\x46\x52\x81\x59\x76\x96\xfe\x2f\xe2\xf8\x39\x8c\x3a\xad\x26\x52\x7e\x55\xe2\x22\x2e\xc3\x60\xe5\xad\xb1\xe3\x45\x08\xe6\x76\xef\xef\x24\xfd\xf3\xdc\x20\xc1\xb1\xbb\x8c\xdc\xc4\x34\xa7\x05\xa3\xa5\xc2\x92\xea\x70\xea\x32\x61\x85\xfd\xb5\x9f\xe0\x65\xe8\xfb\x8b\xc0\x19\x46\x1f\x31\x95\x35\xd1\x8f\xfd\x3b\x55\x63\x93\x66\x08\x5e\xaf\x66\xbd\xdd\xc3\xfb\xbc\x60\x8a\xc4\x8f\xe1\x4f\xcc\x9b\x3a\xfb\x0b\xf3\xbe\xef\x67\xea\xe3\x15\x93\xa2\x3e\x0c\x7f\x8b\xba\x65\x2c\x3e\x82\x7e\x30\xf2\x7e\xf4\xe7\x3d\x93\xe5\x7f\x24\x30\x7a\x04\xfd\xdb\x78\xf8\x09\xee\xfe\xe3\xdc\xd8\x31\x45\xfc\x97\xfc\xdf\x01\x00\x00\xff\xff\x69\x29\xd6\x4d\xcd\x07\x00\x00")

func pipelinePipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_pipelinePipelineYml,
		"pipeline/pipeline.yml",
	)
}

func pipelinePipelineYml() (*asset, error) {
	bytes, err := pipelinePipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pipeline/pipeline.yml", size: 1997, mode: os.FileMode(420), modTime: time.Unix(1466701672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pipelineVarsYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x8e\x41\x6a\xc5\x30\x0c\x44\xf7\x3e\xc5\xdc\xa0\xfb\x52\x7c\x15\x63\x14\x25\x15\x34\x96\x91\x64\x42\x6e\x5f\x07\x93\x0b\xfc\xdd\x9b\xe7\xf1\xa0\x43\xa2\x18\x77\x2d\xc3\xe4\x1b\x3f\xb7\x0e\xc3\x74\x78\x1c\xa6\xcb\xc9\x6f\x0f\x3e\xcb\xa6\x67\x95\xf6\x56\x68\xc7\xf2\x58\x3e\xa7\xe1\x6c\x45\xb6\x59\x78\x08\x95\x48\x47\x0b\x5c\x12\xbf\xe8\x6c\xa7\xb8\x8b\x36\x84\x82\x8c\x6b\x30\xd4\x0e\xff\xf2\x5e\x89\x3d\xa7\x5e\xdd\x2f\xb5\xe7\xfb\x8b\xd0\x1d\x9f\x4c\xd1\x9f\x70\x8b\xe2\x3c\x1f\x63\xee\xad\x8c\x95\xb1\xab\x61\xd4\x4a\x0b\xd6\xcd\x39\xfd\x07\x00\x00\xff\xff\x96\x41\x51\x7f\x06\x01\x00\x00")

func pipelineVarsYmlBytes() ([]byte, error) {
	return bindataRead(
		_pipelineVarsYml,
		"pipeline/vars.yml",
	)
}

func pipelineVarsYml() (*asset, error) {
	bytes, err := pipelineVarsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pipeline/vars.yml", size: 262, mode: os.FileMode(420), modTime: time.Unix(1466703024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pipeline/cf-mgmt.sh": pipelineCfMgmtSh,
	"pipeline/cf-mgmt.yml": pipelineCfMgmtYml,
	"pipeline/pipeline.yml": pipelinePipelineYml,
	"pipeline/vars.yml": pipelineVarsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"pipeline": &bintree{nil, map[string]*bintree{
		"cf-mgmt.sh": &bintree{pipelineCfMgmtSh, map[string]*bintree{}},
		"cf-mgmt.yml": &bintree{pipelineCfMgmtYml, map[string]*bintree{}},
		"pipeline.yml": &bintree{pipelinePipelineYml, map[string]*bintree{}},
		"vars.yml": &bintree{pipelineVarsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

