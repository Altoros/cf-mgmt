// Code generated by go-bindata.
// sources:
// files/cf-mgmt.sh
// files/cf-mgmt.yml
// files/pipeline.yml
// files/security-group.json
// files/vars.yml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesCfMgmtSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\x2a\x4e\x2d\x51\xd0\x4d\xe5\x4a\x4e\x51\x48\xce\xcf\x4b\xcb\x4c\xd7\x2d\x4a\x2d\xc8\xe7\x4a\x4e\xd3\xcd\x4d\xcf\x2d\x51\x50\x71\x76\x8b\xf7\x75\xf7\x0d\x89\x77\xf6\xf7\xf5\x75\xf4\x73\xe1\x02\x04\x00\x00\xff\xff\x4b\xdb\x02\xbb\x43\x00\x00\x00")

func filesCfMgmtShBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtSh,
		"files/cf-mgmt.sh",
	)
}

func filesCfMgmtSh() (*asset, error) {
	bytes, err := filesCfMgmtShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.sh", size: 67, mode: os.FileMode(420), modTime: time.Unix(1466700458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesCfMgmtYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xcc\x41\x0e\x03\x21\x08\x85\xe1\x3d\xa7\xf0\x02\x94\xbd\xb7\x31\x54\x1d\x33\x23\x12\xc0\xa6\xc7\xef\x74\xd3\xa4\xeb\xef\xbd\x1f\x11\x41\xaf\x12\x6d\xd9\xcc\xe9\x1a\xb2\xdf\x00\x63\x96\x5e\x73\x7a\x2e\x3e\xab\x65\x22\x52\x6e\x5e\xed\x35\xb8\x3a\x71\xc3\xd9\x67\xdc\x2b\xd1\x1d\x9e\x21\x25\x4c\x52\xe6\x7d\xe0\x25\x6d\x74\xb4\xaa\x0b\xc0\xb6\x7c\x4d\x4b\x1c\x7f\x42\x3c\x28\x8a\x9f\xbf\xd2\xc3\x0f\xf8\x04\x00\x00\xff\xff\x61\xad\x8f\x57\x87\x00\x00\x00")

func filesCfMgmtYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtYml,
		"files/cf-mgmt.yml",
	)
}

func filesCfMgmtYml() (*asset, error) {
	bytes, err := filesCfMgmtYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.yml", size: 135, mode: os.FileMode(420), modTime: time.Unix(1466702629, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesPipelineYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x94\xcb\x8e\x9b\x30\x14\x86\xf7\x79\x8a\xf3\x02\x4c\xd4\x45\x37\xec\xa2\xc0\x8c\x90\x0a\x54\x40\x55\x55\x55\x65\x79\xe0\x84\xba\x83\x01\xd9\x26\x15\x8a\xf2\xee\xb5\x21\x5c\xd5\x4b\xa2\x2e\xd9\x19\x9f\xdb\xff\x7f\x07\x59\xa0\xac\x1a\x91\xa2\xb4\x77\x16\x94\x94\xa3\x0d\x69\x55\x9e\x58\x6e\x09\xac\xab\x1d\x80\x6a\x6b\x7d\x97\x33\xa5\xcf\x7d\xaa\xad\x4f\x00\x8d\x60\x36\x5c\x2e\x3a\x40\x4c\x26\xd1\xdf\xd7\x6b\x17\x79\x15\xb4\x4c\xbf\xdb\xc0\xa9\x54\x28\xba\xab\x5a\xb0\x33\x55\x48\xde\xb0\x1d\x8a\x66\x57\xba\x6e\x98\xfd\xee\x3d\x1f\x67\x2a\xc6\x71\x1a\x0a\x17\x56\xea\x76\x67\x5a\x74\x59\xd7\xdd\xee\x47\xf5\x3a\x57\x2d\x50\xb7\xb3\x2a\x91\x4b\x5d\x54\x17\xb4\x34\x3a\x2d\xc8\x51\xad\x2d\xe9\x01\x82\xe5\x39\x0a\x3d\x43\x34\xd8\xa5\x29\x2a\xdf\xd6\x4d\x00\x4e\xac\x58\x02\xd9\xa7\x6c\x6f\x52\xe5\x3e\x3d\x59\x3c\xe7\xea\xa9\xe5\x45\x6f\x91\x0a\xca\x65\xcf\x06\x20\xfe\x12\x27\xae\x4f\x9c\xd0\x3f\x78\x81\xb1\x2c\x5b\x0d\x83\x93\xac\xe2\x94\x95\x37\x50\x00\x9f\x62\x37\x22\x9e\x63\x12\x1a\x89\x82\xb0\x6c\x0c\x7d\x3c\xc4\xf1\xe7\x30\xea\x62\x35\x95\xf2\x67\x25\xa6\xe0\x31\x0c\x9e\xbd\x17\xe2\x78\x91\x0d\x4f\xfb\x5e\xdf\x10\xfa\xe0\xb9\x41\x42\x62\xf7\x18\xb9\x89\x29\x4e\x0b\x86\xa5\x22\x12\xb5\x39\x35\x75\x78\x26\xfe\x8b\x9f\x90\x63\xe8\xfb\x87\xc0\x59\x5a\x5f\x31\x95\x35\xd5\x3f\xc8\xbf\xa9\x1a\x99\x98\xd9\xf0\x75\xd6\xeb\xdb\x3d\xbc\xc7\x01\x5b\x24\x7e\x33\x3f\x30\x6f\xea\xec\x7f\x98\xf7\x75\x7f\xa7\xbe\x1e\xb1\x29\xea\x4b\xf3\xbf\xa3\x6e\x19\x89\x8f\xa0\x5f\xb4\xfc\x13\xfa\xae\x45\xff\xbc\xdd\xb7\x99\x51\xc6\x66\xd7\x73\x23\xb0\xda\x91\x7e\x55\x1e\xde\xd0\x1d\x0f\xd2\x23\xfb\x99\x4b\xd8\xe2\x76\x26\xff\xbf\x02\x00\x00\xff\xff\x9c\xe6\x1a\xec\x3f\x08\x00\x00")

func filesPipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesPipelineYml,
		"files/pipeline.yml",
	)
}

func filesPipelineYml() (*asset, error) {
	bytes, err := filesPipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/pipeline.yml", size: 2111, mode: os.FileMode(420), modTime: time.Unix(1466720266, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesSecurityGroupJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8a\xe6\x52\x50\xa8\x06\x62\x05\x05\xa5\x82\xa2\xfc\x92\xfc\xe4\xfc\x1c\x25\x2b\x05\xa5\xc4\x9c\x1c\x25\x1d\x88\x70\x4a\x6a\x71\x49\x66\x5e\x62\x49\x66\x7e\x1e\x48\xc6\x40\x0f\x0c\x75\x8d\x4c\x4d\xf5\x90\x30\x4c\x75\x41\x7e\x51\x49\x31\x48\x9d\xa1\xae\x99\xa9\xa9\xb1\xa9\x12\x50\xb8\x96\x2b\x96\x0b\x10\x00\x00\xff\xff\xc7\xba\xfe\x27\x68\x00\x00\x00")

func filesSecurityGroupJsonBytes() ([]byte, error) {
	return bindataRead(
		_filesSecurityGroupJson,
		"files/security-group.json",
	)
}

func filesSecurityGroupJson() (*asset, error) {
	bytes, err := filesSecurityGroupJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/security-group.json", size: 104, mode: os.FileMode(420), modTime: time.Unix(1467067135, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesVarsYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x8e\x41\x6a\xc5\x30\x0c\x44\xf7\x3e\xc5\xdc\xa0\xfb\x52\x7c\x15\x63\x14\x25\x15\x34\x96\x91\x64\x42\x6e\x5f\x07\x93\x0b\xfc\xdd\x9b\xe7\xf1\xa0\x43\xa2\x18\x77\x2d\xc3\xe4\x1b\x3f\xb7\x0e\xc3\x74\x78\x1c\xa6\xcb\xc9\x6f\x0f\x3e\xcb\xa6\x67\x95\xf6\x56\x68\xc7\xf2\x58\x3e\xa7\xe1\x6c\x45\xb6\x59\x78\x08\x95\x48\x47\x0b\x5c\x12\xbf\xe8\x6c\xa7\xb8\x8b\x36\x84\x82\x8c\x6b\x30\xd4\x0e\xff\xf2\x5e\x89\x3d\xa7\x5e\xdd\x2f\xb5\xe7\xfb\x8b\xd0\x1d\x9f\x4c\xd1\x9f\x70\x8b\xe2\x3c\x1f\x63\xee\xad\x8c\x95\xb1\xab\x61\xd4\x4a\x0b\xd6\xcd\x39\xfd\x07\x00\x00\xff\xff\x96\x41\x51\x7f\x06\x01\x00\x00")

func filesVarsYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesVarsYml,
		"files/vars.yml",
	)
}

func filesVarsYml() (*asset, error) {
	bytes, err := filesVarsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/vars.yml", size: 262, mode: os.FileMode(420), modTime: time.Unix(1466703024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/cf-mgmt.sh": filesCfMgmtSh,
	"files/cf-mgmt.yml": filesCfMgmtYml,
	"files/pipeline.yml": filesPipelineYml,
	"files/security-group.json": filesSecurityGroupJson,
	"files/vars.yml": filesVarsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"cf-mgmt.sh": &bintree{filesCfMgmtSh, map[string]*bintree{}},
		"cf-mgmt.yml": &bintree{filesCfMgmtYml, map[string]*bintree{}},
		"pipeline.yml": &bintree{filesPipelineYml, map[string]*bintree{}},
		"security-group.json": &bintree{filesSecurityGroupJson, map[string]*bintree{}},
		"vars.yml": &bintree{filesVarsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

