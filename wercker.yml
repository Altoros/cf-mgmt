box: golang
build:
  # The steps that will be executed on build
  steps:
    # Sets the go workspace and places you package
    # at the right place in the workspace tree
    - setup-go-workspace
    - wercker/golint:
        exclude: "^vendor\\|fakes"

    # Get the dependencies
    - script:
        name: go get
        code: |
          export GO15VENDOREXPERIMENT=1
          cd $WERCKER_SOURCE_DIR
          go version
          go get github.com/Masterminds/glide
          export PATH=$WERCKER_SOURCE_DIR/bin:$PATH
          glide install

    # Test the project
    - script:
        name: go test
        code: |
          go test $(glide novendor) -v -race

    # Setting the coverage watermark low.
    # This should be raised as we gain more coverage...
    # Test coverage for the project
    - script:
        name: go test cover
        code: |
          ./testCoverage $(glide novendor) $COVERAGE_WATERMARK

    # lets make sure we can build
    # the main executable (later we can cross compile and upload)
    - script:
        name: go smoke build
        code: |
          (go build)

    - script:
        name: set release id variable and version
        code: |
          go get github.com/xchapter7x/versioning
          export NEXT_VERSION=`versioning bump_patch`
          echo "next version should be: ${NEXT_VERSION}"

    - script:
        name: cross platform release
        code: |
          (GOOS=linux GOARCH=amd64 go build -ldflags "-X main.VERSION=${NEXT_VERSION}" && mkdir -p ${WERCKER_OUTPUT_DIR}/${BUILD_DIR}/linux64 && mv cf-mgmt ${WERCKER_OUTPUT_DIR}/${BUILD_DIR}/linux64)
          (GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.VERSION=${NEXT_VERSION}" && mkdir -p ${WERCKER_OUTPUT_DIR}/${BUILD_DIR}/osx && mv cf-mgmt ${WERCKER_OUTPUT_DIR}/${BUILD_DIR}/osx)
          (GOOS=windows GOARCH=amd64 go build -ldflags "-X main.VERSION=${NEXT_VERSION}" && mkdir -p ${WERCKER_OUTPUT_DIR}/${BUILD_DIR}/win64 && mv cf-mgmt.exe ${WERCKER_OUTPUT_DIR}/${BUILD_DIR}/win64)

    - script:
        name: list output dir
        code: |
          echo ${WERCKER_OUTPUT_DIR}/${BUILD_DIR}
          ls -al ${WERCKER_OUTPUT_DIR}/${BUILD_DIR}
    - script:
        name: create tarball
        code: |
          tar -cvzf cf-mgmt_binaries.tgz ${WERCKER_OUTPUT_DIR}/${BUILD_DIR}/

    - script:
        name: copy to output dir
        code: |
          cp cf-mgmt_binaries.tgz ${WERCKER_OUTPUT_DIR}/.
          cp ${WERCKER_OUTPUT_DIR}/${BUILD_DIR}/linux64/cf-mgmt ${WERCKER_OUTPUT_DIR}/.

    - script:
        name: list output dir
        code: |
         ls -al ${WERCKER_OUTPUT_DIR}



deploy:
  steps:
    - script:
        name: install-packages
        code: |
          sudo apt-get install -y openssh-client wget
          ls -la
          pwd
          echo ${WERCKER_OUTPUT_DIR}
          ls -la ${WERCKER_OUTPUT_DIR}

    - wercker/add-ssh-key@1.0.2:
        keyname: PCF_GITHUB_KEY

    - wercker/add-to-known_hosts@1.4.0:
        hostname: github.com
        fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48

    - script:
        name: set release id variable for version
        code: |
          go get github.com/xchapter7x/versioning
          export WERCKER_GITHUB_CREATE_RELEASE_ID=`versioning bump_patch`

    - script:
        name: show directory
        code: |
          ls -la
          pwd

    - internal/docker-scratch-push:
        username: $DOCKER_HUB_USERNAME
        password: $DOCKER_HUB_PASSWORD
        tag: latest,CF-MGMT-$WERCKER_GITHUB_CREATE_RELEASE_ID
        repository: pcfservices/cf-mgmt
        registry: https://registry.hub.docker.com

    - github-create-release:
        token: $GITHUB_TOKEN
        tag: $WERCKER_GITHUB_CREATE_RELEASE_ID
        title: CF-MGMT $WERCKER_GITHUB_CREATE_RELEASE_ID
        prerelease: $RELEASE_PRERELEASE

    - github-upload-asset:
        token: $GITHUB_TOKEN
        file: cf-mgmt_binaries.tgz
        release_id: $WERCKER_GITHUB_CREATE_RELEASE_ID
        content-type: application/x-gzip
